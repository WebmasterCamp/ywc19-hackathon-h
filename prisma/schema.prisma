// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    bookings      Booking[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Booking {
    id         String   @default(cuid())
    userId     String
    user       User     @relation(fields: [userId], references: [id])
    menuId     String
    menu       Menu     @relation(fields: [menuId], references: [id])
    bookedTime DateTime

    @@id([userId, menuId, id])
}

model Restaurant {
    id            String  @id @default(cuid())
    name          String
    description   String
    location      String
    imageUrl      String?
    menus         Menu[]
    isRecommended Boolean @default(false)
    tags          Tag[]
    contact       String  @default("")
    openTime      String  @default("")
}

model Menu {
    id            String      @id @default(cuid())
    restaurant    Restaurant? @relation(fields: [restaurantId], references: [id])
    restaurantId  String?
    name          String
    price         Int
    booking       Booking[]
    description   String      @default("")
    isRecommended Boolean     @default(false)
}

model Tag {
    id          String       @id @default(cuid())
    name        String
    restaurants Restaurant[]
}
